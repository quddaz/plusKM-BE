name: CI/CD

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 이 워크플로우가 트리거됩니다.

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # 리포지토리의 코드를 체크아웃합니다.

    - name: Set up JDK 21
      uses: actions/setup-java@v4  # JDK 17을 설정합니다.
      with:
        java-version: '21'  # 사용할 JDK 버전을 설정합니다.
        distribution: 'temurin'  # AdoptOpenJDK의 Temurin 배포판을 사용합니다.

    - name: Gradle Caching
      uses: actions/cache@v3  # Gradle 캐싱을 설정합니다.
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # 캐시 키를 설정합니다.
        restore-keys: |
          ${{ runner.os }}-gradle-  # 캐시 복원 키를 설정합니다.

    - name: Create application.yml from secret
      run: |
        mkdir -p ./src/main/resources  # 필요한 디렉토리를 생성합니다.
        echo "${{ secrets.APPLICATION }}" | base64 --decode > ./src/main/resources/application.yml  # 시크릿을 디코딩하여 파일로 저장합니다.
      shell: bash  # bash 쉘에서 스크립트를 실행합니다.

    - name: Make gradlew executable
      run: chmod +x ./gradlew  # gradlew 파일에 실행 권한을 부여합니다.

    - name: Build with Gradle Wrapper
      run: ./gradlew build  # Gradle Wrapper를 사용하여 프로젝트를 빌드합니다.
